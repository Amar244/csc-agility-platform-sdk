<?xml version="1.0" standalone="yes"?>
<project name="com.servicemesh.agility.distributed.sync" basedir="." default="help" xmlns:ivy="antlib:org.apache.ivy.ant">

   <property environment="env" />
   <property name="src" value="src" />
   <property name="bin" value="bin" />
   <property name="ivy.lib" value="../ivy-lib" />
   <property name="dist" value="../dist" />
   <property name="common.lib" value="../lib" />
   <property name="bundle.jar" value="com.servicemesh.agility.distributed.sync-1.0.0.jar"/>
   <property name="bundle.instrumented.jar" value="${bundle.jar}"/>
   <property name="version" value = "v1_0" />
   <property name="instrumented" value="${bin}/instrumented" />
   <property name="javadoc.dir" value="../javadoc" />
   <property name="javadoc.jar" value="../dist/com.servicemesh.agility.distributed.sync-1.0.0-doc.jar" />
   <property name="core.jar" value="${dist}/com.servicemesh.core-1.0.0.jar" />

   <property name="unit.test.bin" value="test/unit/bin" />
   <property name="unit.test.reports" value="test/unit/reports" />
   <property name="unit.test.src" value="test/unit/src" />
   <property name="bundle.version" value="1.0.0"/>
   <property name="ivyexists" value="false"/>
   
   <!-- Coverage properties -->
   <property name="coverage.dir" value="../coverage/distributed/sync"/>
   <property name="coverage.datafile.base" value="cobertura.ser"/>
   <property name="coverage.datafile"
   value="${coverage.dir}/${coverage.datafile.base}"/>
   <property name="coverage.report.dir" value="${coverage.dir}/report"/>
   <property name="coverage.debug" value="false"/>
   <property name="coverage.format" value="xml"/>
   
   <available file="${ivy.lib}" type="dir" property="ivyexists" />

   <target name="init" depends="core">
      <mkdir dir="${bin}" />
      <mkdir dir="${unit.test.bin}" />
      <mkdir dir="${unit.test.reports}" />
   </target>
	
	<target name="core-check">
			<condition property="core.exists">
				<available file="${core.jar}" type="file" />
			</condition>
	</target>
		
	<target name="core" depends="core-check" unless="core.exists">
		<echo>"${core.jar} doesn't exist. Building com.servicemesh.core"</echo>
		<ant dir="../com.servicemesh.core" target="deploy" inheritAll="false" />
	</target>

   <target name="coverage-init">
     <initialize-coverage/>
   </target>

   <path id="compile.classpath">
      <fileset dir="${dist}" includes="com.servicemesh.core-1.0.0.jar"/>
      <fileset dir="${ivy.lib}">
         <include name="java-uuid-generator-3.0.0.jar" />
         <include name="slf4j-api-1.7.5.jar" />
         <include name="log4j-1.2.17.jar"/>
         <include name="zookeeper-3.4.2.jar" />
         <include name="org.apache.felix.configadmin-1.8.4.jar" />
         <include name="org.apache.felix.fileinstall-3.5.0.jar" />
         <include name="org.apache.felix.framework-4.2.1.jar" />
      </fileset>
   </path>

   <path id="unit.test.compile.classpath">
     <path refid="compile.classpath"/>
     <pathelement location="${bin}"/>
     <fileset dir="${ivy.lib}">
        <include name="mockito-all-1.10.19.jar" />
        <include name="junit-4.11.jar" />
        <include name="commons-cli-1.2.jar" />
        <include name="groovy-1.8.9.jar" />
        <include name="groovy-all-1.8.9.jar" />
        <include name="spock-core-0.6-groovy-1.8.jar" />
        <include name="asm-3.2.jar" />
        <include name="cglib-nodep-2.2.2.jar" />
     </fileset>
     <path refid="cobertura.classpath"/>
   </path>

   <path id="spock.classpath">
      <fileset dir="${ivy.lib}">
         <include name="cglib-nodep-2.2.2.jar" />
         <include name="slf4j-api-1.7.5.jar" />
         <include name="slf4j-jcl-1.7.5.jar" />
         <include name="groovy-all-1.8.9.jar" />
         <include name="spock-core-0.6-groovy-1.8.jar" />
         <include name="asm-3.2.jar" />
      </fileset>
   </path>

   <path id="unit.test.classpath">
     <pathelement location="${unit.test.bin}"/>
     <fileset dir="${ivy.lib}">
        <include name="java-uuid-generator-3.0.0.jar" />
        <include name="junit-4.11.jar" />
        <include name="log4j-1.2.17.jar"/>
        <include name="zookeeper-3.4.2.jar" />
        <include name="org.apache.felix.configadmin-1.8.4.jar" />
        <include name="org.apache.felix.fileinstall-3.5.0.jar" />
        <include name="org.apache.felix.framework-4.2.1.jar" />
        <include name="cglib-nodep-2.2.2.jar" />
        <include name="mockito-all-1.10.19.jar"/>
        <include name="commons-logging-1.1.1.jar" />
        <include name="commons-cli-1.2.jar" />
        <include name="groovy-1.8.9.jar" />
        <include name="groovy-all-1.8.9.jar" />
        <include name="spock-core-0.6-groovy-1.8.jar" />
        <include name="asm-3.2.jar" />
     </fileset>
     <pathelement location="${bin}"/>
     <path refid="cobertura.classpath"/>
   </path>
   
   <path id="cobertura.classpath">
      <fileset dir="${common.lib}">
         <include name="cobertura*.jar"/>
      </fileset>
      <fileset dir="${ivy.lib}">
         <include name="asm-5*.jar"/>
         <include name="asm-analysis*.jar"/>
         <include name="asm-commons*.jar"/>
         <include name="asm-tree*.jar"/>
         <include name="asm-util*.jar"/>
         <include name="commons-lang3-*.jar"/>
         <include name="commons-logging-*.jar"/>
         <include name="log4j-*.jar"/>
         <include name="oro-*.jar"/>
         <include name="slf4j-api*.jar"/>
         <include name="slf4j-log*.jar"/>
      </fileset>
   </path>
   
   <path id="groovy.classpath">
      <fileset dir="${ivy.lib}">
         <include name="groovy-all-*.jar"/>
      </fileset>
   </path>

   <target name="groovyc" if="ivyexists" >
      <taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpathref="spock.classpath" />
   </target>

   <!-- ============= build ============ -->

   <target name="compile" description="Compile all Java source files" depends="init,license">
      <echo message="Compiling the bundles/distributed/sync java source files..." />
      <javac destdir="${bin}" debug="on" fork="true" includeantruntime="false">
         <src path="${src}" />
         <classpath>
            <path refid="compile.classpath"/>
         </classpath>
      </javac>
   </target>
   
   <target name="license">
      <concat destfile="${bin}/LICENSE">
         <header>${ant.project.name}
         </header>
         <fileset dir="../" includes="LICENSE" />
      </concat>
   </target>


   <target name="deploy" depends="compile,deploy_unit_test" description="Generate and deploy bundle">
      <jar destfile="${dist}/${bundle.jar}"
           manifest="META-INF/MANIFEST.MF"
           basedir="${bin}">
          <fileset dir="${bin}" includes="**/*.class"/>
          <zipfileset src="${ivy.lib}/java-uuid-generator-3.0.0.jar" includes="**/*.class"/>
      </jar>
   </target>

   <target name='javadoc' depends="license" >
      <javadoc destdir="${javadoc.dir}/distributed/sync"
               author="false"
               version="true"
               use="true"
               Public="true"
               windowtitle="Agility Platform Distributed Sync">
          <classpath>
             <pathelement path="${classes}"/>
             <path refid="compile.classpath"/>
          </classpath>

          <fileset dir="${src}">
             <include name="**/*.java"/>
             <exclude name="**/DistributedQueue.java"/>
             <exclude name="**/LockListener.java"/>
             <exclude name="**/WriteLock.java"/>
             <exclude name="**/ZNodeName.java"/>
             <exclude name="**/ZooKeeperOperation.java"/>
             <exclude name="**/impl/*.java"/>
             <exclude name="**/node/*.java"/>
          </fileset>

          <doctitle><![CDATA[<h1>Agility Platform Distributed Sync</h1>]]></doctitle>
          <bottom><![CDATA[<i>Copyright &#169; 2013-Present Computer Sciences Corporation</i>]]></bottom>
          <link href="../../core"/>
          <link offline="true"
            href="http://docs.oracle.com/javase/8/docs/api"
            packagelistLoc="../../root"/>
      </javadoc>
      
      <jar destfile="${javadoc.jar}" basedir="${javadoc.dir}/distributed/sync" >
         <fileset dir="${javadoc.dir}/distributed/sync" includes="*"/>
         <fileset dir="${bin}" includes="LICENSE"/>
      </jar>
   </target>
	
   <!-- =====================================================================
    Coverage
    ================================================================= -->
   <target name="init_coverage" description="Initializes coverage tool">
      <mkdir dir="${coverage.dir}"/>
      <taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>
      <taskdef name="groovy" classpathref="groovy.classpath"
      classname="org.codehaus.groovy.ant.Groovy"/>
   </target>
   
   <target name="instrument_coverage" depends="init_coverage"
      description="Instrument source code for coverage measurement">
      <echo message="Instrumenting to ${coverage.datafile}"/>
      <cobertura-instrument datafile="${coverage.datafile}">
         <fileset dir="${bin}">
            <include name="**/*.class"/>
         </fileset>
      </cobertura-instrument>
   </target>
   
   <target name="do-coverage-report" depends="instrument_coverage,unit_test">
      <groovy><![CDATA[
         def topSrcDir = new File(properties.'basedir')
         ant.'cobertura-report'(format:properties.'coverage.format',
                                datafile:properties.'coverage.datafile',
                                destdir:properties.'coverage.report.dir') {
            topSrcDir.eachDirRecurse { dir ->
               if (dir.name == 'src') {
                  if (properties.'coverage.debug' == 'true') {
                     println "$dir";
                  }
                  fileset(dir:dir) {
                     include(name:'**/*.java')
                  }
               }
            }
         }
      ]]></groovy>
   </target>
   
   <target name="coverage-report" description="Generate coverage report">
      <antcall target="do-coverage-report">
         <param name="coverage.format" value="${coverage.format}"/>
      </antcall>
   </target>

  <!-- ============= unit test ============ -->

  <target name="unit_test_compile" depends="groovyc" unless="skipTests">
    <echo message="Compiling the test source files..."/>
    <groovyc verbose="true"
            srcdir="${unit.test.src}"
            destdir="${unit.test.bin}"
            classpathref="unit.test.compile.classpath" />
    <javac destdir="${unit.test.bin}" debug="on" fork="true" includeantruntime="false">
       <src path="${unit.test.src}"/>
       <classpath>
          <path refid="unit.test.compile.classpath"/>
       </classpath>
    </javac>
  </target>

  <target name="deploy_unit_test" unless="coverage_requested"
           description="Run junit tests with deploy if no coverage requested">
      <antcall target="unit_test"/>
  </target>

  <target name="unit_test" unless="skipTests" depends="unit_test_compile">
    <junit fork="yes" printsummary="true" showoutput="true">
      <!-- <formatter type="plain" usefile="false" /> -->
      <formatter type="xml" />
      <sysproperty key="net.sourceforge.cobertura.datafile" value="${coverage.datafile}"/>

      <classpath refid="spock.classpath" />
      <classpath refid="unit.test.classpath" />
      <jvmarg value="-noverify" />
      <batchtest fork="yes" todir="${unit.test.reports}">
        <fileset dir="${unit.test.src}">
          <include name="**/*Test*.java"/>
          <exclude name="**/AllTests.java"/>
          <exclude name="**/TestHelpers.java"/>
        </fileset>
      </batchtest>

    </junit>
  </target>

  <!-- ============= cleanup ============ -->

   <target name="clean" description="Deletes all generated artifacts.">
      <delete dir="${bin}" />
      <delete file="${dist}/${bundle.jar}"/>
      <delete dir="${unit.test.bin}" />
      <delete dir="${unit.test.reports}" />
      <delete dir="${javadoc.dir}/distributed" />
      <delete file="${javadoc.jar}" />
      <delete dir="../coverage/distributed" />
   </target>

   <target name="help" description="Help">
      <echo message="deploy - Compiles and creates the jar file."/>
   </target>

</project>
